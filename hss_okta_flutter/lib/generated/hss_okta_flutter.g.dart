// Autogenerated from Pigeon (v12.0.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon
// ignore_for_file: public_member_api_docs, non_constant_identifier_names, avoid_as, unused_import, unnecessary_parenthesis, prefer_null_aware_operators, omit_local_variable_types, unused_shown_name, unnecessary_import

import 'dart:async';
import 'dart:typed_data' show Float64List, Int32List, Int64List, Uint8List;

import 'package:flutter/foundation.dart' show ReadBuffer, WriteBuffer;
import 'package:flutter/services.dart';

List<Object?> wrapResponse(
    {Object? result, PlatformException? error, bool empty = false}) {
  if (empty) {
    return <Object?>[];
  }
  if (error == null) {
    return <Object?>[result];
  }
  return <Object?>[error.code, error.message, error.details];
}

enum AuthenticationType {
  browser,
  sso,
  directAuth,
}

enum AuthenticationResult {
  success,
  mfaRequired,
  error,
}

enum AuthenticationFactor {
  otp,
  oob,
}

class OktaAuthenticationResult {
  OktaAuthenticationResult({
    this.result,
    this.error,
    this.token,
    this.userInfo,
  });

  AuthenticationResult? result;

  String? error;

  OktaToken? token;

  UserInfo? userInfo;

  Object encode() {
    return <Object?>[
      result?.index,
      error,
      token?.encode(),
      userInfo?.encode(),
    ];
  }

  static OktaAuthenticationResult decode(Object result) {
    result as List<Object?>;
    return OktaAuthenticationResult(
      result: result[0] != null
          ? AuthenticationResult.values[result[0]! as int]
          : null,
      error: result[1] as String?,
      token: result[2] != null
          ? OktaToken.decode(result[2]! as List<Object?>)
          : null,
      userInfo: result[3] != null
          ? UserInfo.decode(result[3]! as List<Object?>)
          : null,
    );
  }
}

class OktaToken {
  OktaToken({
    this.id,
    this.token,
    this.issuedAt,
    this.tokenType,
    this.accessToken,
    this.scope,
    this.refreshToken,
  });

  String? id;

  String? token;

  int? issuedAt;

  String? tokenType;

  String? accessToken;

  String? scope;

  String? refreshToken;

  Object encode() {
    return <Object?>[
      id,
      token,
      issuedAt,
      tokenType,
      accessToken,
      scope,
      refreshToken,
    ];
  }

  static OktaToken decode(Object result) {
    result as List<Object?>;
    return OktaToken(
      id: result[0] as String?,
      token: result[1] as String?,
      issuedAt: result[2] as int?,
      tokenType: result[3] as String?,
      accessToken: result[4] as String?,
      scope: result[5] as String?,
      refreshToken: result[6] as String?,
    );
  }
}

class UserInfo {
  UserInfo({
    required this.userId,
    required this.givenName,
    required this.middleName,
    required this.familyName,
    required this.gender,
    required this.email,
    required this.phoneNumber,
    required this.username,
  });

  String userId;

  String givenName;

  String middleName;

  String familyName;

  String gender;

  String email;

  String phoneNumber;

  String username;

  Object encode() {
    return <Object?>[
      userId,
      givenName,
      middleName,
      familyName,
      gender,
      email,
      phoneNumber,
      username,
    ];
  }

  static UserInfo decode(Object result) {
    result as List<Object?>;
    return UserInfo(
      userId: result[0]! as String,
      givenName: result[1]! as String,
      middleName: result[2]! as String,
      familyName: result[3]! as String,
      gender: result[4]! as String,
      email: result[5]! as String,
      phoneNumber: result[6]! as String,
      username: result[7]! as String,
    );
  }
}

class DirectAuthRequest {
  DirectAuthRequest({
    required this.username,
    required this.password,
    required this.factors,
  });

  String username;

  String password;

  List<String?> factors;

  Object encode() {
    return <Object?>[
      username,
      password,
      factors,
    ];
  }

  static DirectAuthRequest decode(Object result) {
    result as List<Object?>;
    return DirectAuthRequest(
      username: result[0]! as String,
      password: result[1]! as String,
      factors: (result[2] as List<Object?>?)!.cast<String?>(),
    );
  }
}

class _HssOktaFlutterPluginApiCodec extends StandardMessageCodec {
  const _HssOktaFlutterPluginApiCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is DirectAuthRequest) {
      buffer.putUint8(128);
      writeValue(buffer, value.encode());
    } else if (value is OktaAuthenticationResult) {
      buffer.putUint8(129);
      writeValue(buffer, value.encode());
    } else if (value is OktaToken) {
      buffer.putUint8(130);
      writeValue(buffer, value.encode());
    } else if (value is UserInfo) {
      buffer.putUint8(131);
      writeValue(buffer, value.encode());
    } else {
      super.writeValue(buffer, value);
    }
  }

  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 128:
        return DirectAuthRequest.decode(readValue(buffer)!);
      case 129:
        return OktaAuthenticationResult.decode(readValue(buffer)!);
      case 130:
        return OktaToken.decode(readValue(buffer)!);
      case 131:
        return UserInfo.decode(readValue(buffer)!);
      default:
        return super.readValueOfType(type, buffer);
    }
  }
}

class HssOktaFlutterPluginApi {
  /// Constructor for [HssOktaFlutterPluginApi].  The [binaryMessenger] named argument is
  /// available for dependency injection.  If it is left null, the default
  /// BinaryMessenger will be used which routes to the host platform.
  HssOktaFlutterPluginApi({BinaryMessenger? binaryMessenger})
      : _binaryMessenger = binaryMessenger;
  final BinaryMessenger? _binaryMessenger;

  static const MessageCodec<Object?> codec = _HssOktaFlutterPluginApiCodec();

  Future<void> initializeConfiguration(
      String arg_clientid,
      String arg_signInRedirectUrl,
      String arg_signOutRedirectUrl,
      String arg_issuer,
      String arg_scopes) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.hss_okta_flutter.HssOktaFlutterPluginApi.initializeConfiguration',
        codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList = await channel.send(<Object?>[
      arg_clientid,
      arg_signInRedirectUrl,
      arg_signOutRedirectUrl,
      arg_issuer,
      arg_scopes
    ]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }

  Future<OktaAuthenticationResult?> startDirectAuthenticationFlow(
      DirectAuthRequest arg_request) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.hss_okta_flutter.HssOktaFlutterPluginApi.startDirectAuthenticationFlow',
        codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_request]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return (replyList[0] as OktaAuthenticationResult?);
    }
  }

  Future<OktaAuthenticationResult?> continueDirectAuthenticationMfaFlow(
      String arg_otp) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.hss_okta_flutter.HssOktaFlutterPluginApi.continueDirectAuthenticationMfaFlow',
        codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_otp]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return (replyList[0] as OktaAuthenticationResult?);
    }
  }

  Future<bool?> refreshDefaultToken() async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.hss_okta_flutter.HssOktaFlutterPluginApi.refreshDefaultToken',
        codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList = await channel.send(null) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return (replyList[0] as bool?);
    }
  }

  Future<bool?> revokeDefaultToken() async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.hss_okta_flutter.HssOktaFlutterPluginApi.revokeDefaultToken',
        codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList = await channel.send(null) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return (replyList[0] as bool?);
    }
  }

  Future<OktaAuthenticationResult?> getCredential() async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.hss_okta_flutter.HssOktaFlutterPluginApi.getCredential',
        codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList = await channel.send(null) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return (replyList[0] as OktaAuthenticationResult?);
    }
  }
}
