// Autogenerated from Pigeon (v11.0.1), do not edit directly.
// See also: https://pub.dev/packages/pigeon

import Foundation
#if os(iOS)
import Flutter
#elseif os(macOS)
import FlutterMacOS
#else
#error("Unsupported platform.")
#endif

private func isNullish(_ value: Any?) -> Bool {
  return value is NSNull || value == nil
}

private func wrapResult(_ result: Any?) -> [Any?] {
  return [result]
}

private func wrapError(_ error: Any) -> [Any?] {
  if let flutterError = error as? FlutterError {
    return [
      flutterError.code,
      flutterError.message,
      flutterError.details
    ]
  }
  return [
    "\(error)",
    "\(type(of: error))",
    "Stacktrace: \(Thread.callStackSymbols)"
  ]
}

private func nilOrValue<T>(_ value: Any?) -> T? {
  if value is NSNull { return nil }
  return value as! T?
}

/// Generated class from Pigeon that represents data sent in messages.
struct HssOktaDirectAuthRequest {
  var username: String
  var password: String

  static func fromList(_ list: [Any?]) -> HssOktaDirectAuthRequest? {
    let username = list[0] as! String
    let password = list[1] as! String

    return HssOktaDirectAuthRequest(
      username: username,
      password: password
    )
  }
  func toList() -> [Any?] {
    return [
      username,
      password,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct HssOktaDirectAuthResult {
  var result: String

  static func fromList(_ list: [Any?]) -> HssOktaDirectAuthResult? {
    let result = list[0] as! String

    return HssOktaDirectAuthResult(
      result: result
    )
  }
  func toList() -> [Any?] {
    return [
      result,
    ]
  }
}

private class HssOktaDirectAuthPluginCodecReader: FlutterStandardReader {
  override func readValue(ofType type: UInt8) -> Any? {
    switch type {
      case 128:
        return HssOktaDirectAuthRequest.fromList(self.readValue() as! [Any?])
      case 129:
        return HssOktaDirectAuthResult.fromList(self.readValue() as! [Any?])
      default:
        return super.readValue(ofType: type)
    }
  }
}

private class HssOktaDirectAuthPluginCodecWriter: FlutterStandardWriter {
  override func writeValue(_ value: Any) {
    if let value = value as? HssOktaDirectAuthRequest {
      super.writeByte(128)
      super.writeValue(value.toList())
    } else if let value = value as? HssOktaDirectAuthResult {
      super.writeByte(129)
      super.writeValue(value.toList())
    } else {
      super.writeValue(value)
    }
  }
}

private class HssOktaDirectAuthPluginCodecReaderWriter: FlutterStandardReaderWriter {
  override func reader(with data: Data) -> FlutterStandardReader {
    return HssOktaDirectAuthPluginCodecReader(data: data)
  }

  override func writer(with data: NSMutableData) -> FlutterStandardWriter {
    return HssOktaDirectAuthPluginCodecWriter(data: data)
  }
}

class HssOktaDirectAuthPluginCodec: FlutterStandardMessageCodec {
  static let shared = HssOktaDirectAuthPluginCodec(readerWriter: HssOktaDirectAuthPluginCodecReaderWriter())
}

/// Generated protocol from Pigeon that represents a handler of messages from Flutter.
protocol HssOktaDirectAuthPlugin {
  func signInWithCredentials(request: HssOktaDirectAuthRequest, completion: @escaping (Result<HssOktaDirectAuthResult, Error>) -> Void)
}

/// Generated setup class from Pigeon to handle messages through the `binaryMessenger`.
class HssOktaDirectAuthPluginSetup {
  /// The codec used by HssOktaDirectAuthPlugin.
  static var codec: FlutterStandardMessageCodec { HssOktaDirectAuthPluginCodec.shared }
  /// Sets up an instance of `HssOktaDirectAuthPlugin` to handle messages through the `binaryMessenger`.
  static func setUp(binaryMessenger: FlutterBinaryMessenger, api: HssOktaDirectAuthPlugin?) {
    let signInWithCredentialsChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.hss_okta_direct_auth.HssOktaDirectAuthPlugin.signInWithCredentials", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      signInWithCredentialsChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let requestArg = args[0] as! HssOktaDirectAuthRequest
        api.signInWithCredentials(request: requestArg) { result in
          switch result {
            case .success(let res):
              reply(wrapResult(res))
            case .failure(let error):
              reply(wrapError(error))
          }
        }
      }
    } else {
      signInWithCredentialsChannel.setMessageHandler(nil)
    }
  }
}
