// Autogenerated from Pigeon (v11.0.1), do not edit directly.
// See also: https://pub.dev/packages/pigeon

import Foundation
#if os(iOS)
import Flutter
#elseif os(macOS)
import FlutterMacOS
#else
#error("Unsupported platform.")
#endif

private func isNullish(_ value: Any?) -> Bool {
  return value is NSNull || value == nil
}

private func wrapResult(_ result: Any?) -> [Any?] {
  return [result]
}

private func wrapError(_ error: Any) -> [Any?] {
  if let flutterError = error as? FlutterError {
    return [
      flutterError.code,
      flutterError.message,
      flutterError.details
    ]
  }
  return [
    "\(error)",
    "\(type(of: error))",
    "Stacktrace: \(Thread.callStackSymbols)"
  ]
}

private func nilOrValue<T>(_ value: Any?) -> T? {
  if value is NSNull { return nil }
  return value as! T?
}

enum DirectAuthResult: Int {
  case success = 0
  case mfaRequired = 1
  case error = 2
}

/// Generated class from Pigeon that represents data sent in messages.
struct HssOktaDirectAuthRequest {
  var username: String
  var password: String

  static func fromList(_ list: [Any?]) -> HssOktaDirectAuthRequest? {
    let username = list[0] as! String
    let password = list[1] as! String

    return HssOktaDirectAuthRequest(
      username: username,
      password: password
    )
  }
  func toList() -> [Any?] {
    return [
      username,
      password,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct HssOktaDirectAuthResult {
  var result: DirectAuthResult? = nil
  var error: String? = nil
  var id: String? = nil
  var token: String? = nil
  var issuedAt: Int64? = nil
  var tokenType: String? = nil
  var accessToken: String? = nil
  var scope: String? = nil
  var refreshToken: String? = nil
  var userInfo: UserInfo? = nil

  static func fromList(_ list: [Any?]) -> HssOktaDirectAuthResult? {
    var result: DirectAuthResult? = nil
    let resultEnumVal: Int? = nilOrValue(list[0])
    if let resultRawValue = resultEnumVal {
      result = DirectAuthResult(rawValue: resultRawValue)!
    }
    let error: String? = nilOrValue(list[1])
    let id: String? = nilOrValue(list[2])
    let token: String? = nilOrValue(list[3])
    let issuedAt: Int64? = isNullish(list[4]) ? nil : (list[4] is Int64? ? list[4] as! Int64? : Int64(list[4] as! Int32))
    let tokenType: String? = nilOrValue(list[5])
    let accessToken: String? = nilOrValue(list[6])
    let scope: String? = nilOrValue(list[7])
    let refreshToken: String? = nilOrValue(list[8])
    var userInfo: UserInfo? = nil
    if let userInfoList: [Any?] = nilOrValue(list[9]) {
      userInfo = UserInfo.fromList(userInfoList)
    }

    return HssOktaDirectAuthResult(
      result: result,
      error: error,
      id: id,
      token: token,
      issuedAt: issuedAt,
      tokenType: tokenType,
      accessToken: accessToken,
      scope: scope,
      refreshToken: refreshToken,
      userInfo: userInfo
    )
  }
  func toList() -> [Any?] {
    return [
      result?.rawValue,
      error,
      id,
      token,
      issuedAt,
      tokenType,
      accessToken,
      scope,
      refreshToken,
      userInfo?.toList(),
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct UserInfo {
  var userId: String
  var givenName: String
  var middleName: String
  var familyName: String
  var gender: String
  var email: String
  var phoneNumber: String
  var username: String

  static func fromList(_ list: [Any?]) -> UserInfo? {
    let userId = list[0] as! String
    let givenName = list[1] as! String
    let middleName = list[2] as! String
    let familyName = list[3] as! String
    let gender = list[4] as! String
    let email = list[5] as! String
    let phoneNumber = list[6] as! String
    let username = list[7] as! String

    return UserInfo(
      userId: userId,
      givenName: givenName,
      middleName: middleName,
      familyName: familyName,
      gender: gender,
      email: email,
      phoneNumber: phoneNumber,
      username: username
    )
  }
  func toList() -> [Any?] {
    return [
      userId,
      givenName,
      middleName,
      familyName,
      gender,
      email,
      phoneNumber,
      username,
    ]
  }
}

private class HssOktaDirectAuthPluginApiCodecReader: FlutterStandardReader {
  override func readValue(ofType type: UInt8) -> Any? {
    switch type {
      case 128:
        return HssOktaDirectAuthRequest.fromList(self.readValue() as! [Any?])
      case 129:
        return HssOktaDirectAuthResult.fromList(self.readValue() as! [Any?])
      case 130:
        return UserInfo.fromList(self.readValue() as! [Any?])
      default:
        return super.readValue(ofType: type)
    }
  }
}

private class HssOktaDirectAuthPluginApiCodecWriter: FlutterStandardWriter {
  override func writeValue(_ value: Any) {
    if let value = value as? HssOktaDirectAuthRequest {
      super.writeByte(128)
      super.writeValue(value.toList())
    } else if let value = value as? HssOktaDirectAuthResult {
      super.writeByte(129)
      super.writeValue(value.toList())
    } else if let value = value as? UserInfo {
      super.writeByte(130)
      super.writeValue(value.toList())
    } else {
      super.writeValue(value)
    }
  }
}

private class HssOktaDirectAuthPluginApiCodecReaderWriter: FlutterStandardReaderWriter {
  override func reader(with data: Data) -> FlutterStandardReader {
    return HssOktaDirectAuthPluginApiCodecReader(data: data)
  }

  override func writer(with data: NSMutableData) -> FlutterStandardWriter {
    return HssOktaDirectAuthPluginApiCodecWriter(data: data)
  }
}

class HssOktaDirectAuthPluginApiCodec: FlutterStandardMessageCodec {
  static let shared = HssOktaDirectAuthPluginApiCodec(readerWriter: HssOktaDirectAuthPluginApiCodecReaderWriter())
}

/// Generated protocol from Pigeon that represents a handler of messages from Flutter.
protocol HssOktaDirectAuthPluginApi {
  func initializeConfiguration(clientid: String, signInRedirectUrl: String, signOutRedirectUrl: String, issuer: String, scopes: String) throws
  func signInWithCredentials(request: HssOktaDirectAuthRequest, completion: @escaping (Result<HssOktaDirectAuthResult?, Error>) -> Void)
  func mfaOtpSignInWithCredentials(otp: String, completion: @escaping (Result<HssOktaDirectAuthResult?, Error>) -> Void)
  func refreshDefaultToken(completion: @escaping (Result<Bool?, Error>) -> Void)
  func revokeDefaultToken(completion: @escaping (Result<Bool?, Error>) -> Void)
  func getCredential(completion: @escaping (Result<HssOktaDirectAuthResult?, Error>) -> Void)
}

/// Generated setup class from Pigeon to handle messages through the `binaryMessenger`.
class HssOktaDirectAuthPluginApiSetup {
  /// The codec used by HssOktaDirectAuthPluginApi.
  static var codec: FlutterStandardMessageCodec { HssOktaDirectAuthPluginApiCodec.shared }
  /// Sets up an instance of `HssOktaDirectAuthPluginApi` to handle messages through the `binaryMessenger`.
  static func setUp(binaryMessenger: FlutterBinaryMessenger, api: HssOktaDirectAuthPluginApi?) {
    let initializeConfigurationChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.hss_okta_direct_auth.HssOktaDirectAuthPluginApi.initializeConfiguration", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      initializeConfigurationChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let clientidArg = args[0] as! String
        let signInRedirectUrlArg = args[1] as! String
        let signOutRedirectUrlArg = args[2] as! String
        let issuerArg = args[3] as! String
        let scopesArg = args[4] as! String
        do {
          try api.initializeConfiguration(clientid: clientidArg, signInRedirectUrl: signInRedirectUrlArg, signOutRedirectUrl: signOutRedirectUrlArg, issuer: issuerArg, scopes: scopesArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      initializeConfigurationChannel.setMessageHandler(nil)
    }
    let signInWithCredentialsChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.hss_okta_direct_auth.HssOktaDirectAuthPluginApi.signInWithCredentials", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      signInWithCredentialsChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let requestArg = args[0] as! HssOktaDirectAuthRequest
        api.signInWithCredentials(request: requestArg) { result in
          switch result {
            case .success(let res):
              reply(wrapResult(res))
            case .failure(let error):
              reply(wrapError(error))
          }
        }
      }
    } else {
      signInWithCredentialsChannel.setMessageHandler(nil)
    }
    let mfaOtpSignInWithCredentialsChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.hss_okta_direct_auth.HssOktaDirectAuthPluginApi.mfaOtpSignInWithCredentials", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      mfaOtpSignInWithCredentialsChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let otpArg = args[0] as! String
        api.mfaOtpSignInWithCredentials(otp: otpArg) { result in
          switch result {
            case .success(let res):
              reply(wrapResult(res))
            case .failure(let error):
              reply(wrapError(error))
          }
        }
      }
    } else {
      mfaOtpSignInWithCredentialsChannel.setMessageHandler(nil)
    }
    let refreshDefaultTokenChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.hss_okta_direct_auth.HssOktaDirectAuthPluginApi.refreshDefaultToken", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      refreshDefaultTokenChannel.setMessageHandler { _, reply in
        api.refreshDefaultToken() { result in
          switch result {
            case .success(let res):
              reply(wrapResult(res))
            case .failure(let error):
              reply(wrapError(error))
          }
        }
      }
    } else {
      refreshDefaultTokenChannel.setMessageHandler(nil)
    }
    let revokeDefaultTokenChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.hss_okta_direct_auth.HssOktaDirectAuthPluginApi.revokeDefaultToken", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      revokeDefaultTokenChannel.setMessageHandler { _, reply in
        api.revokeDefaultToken() { result in
          switch result {
            case .success(let res):
              reply(wrapResult(res))
            case .failure(let error):
              reply(wrapError(error))
          }
        }
      }
    } else {
      revokeDefaultTokenChannel.setMessageHandler(nil)
    }
    let getCredentialChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.hss_okta_direct_auth.HssOktaDirectAuthPluginApi.getCredential", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      getCredentialChannel.setMessageHandler { _, reply in
        api.getCredential() { result in
          switch result {
            case .success(let res):
              reply(wrapResult(res))
            case .failure(let error):
              reply(wrapError(error))
          }
        }
      }
    } else {
      getCredentialChannel.setMessageHandler(nil)
    }
  }
}
